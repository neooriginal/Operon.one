version: "3.8"

services:
  operonone:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: operonone-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Add your environment variables here
      # - OPENAI_API_KEY=${OPENAI_API_KEY}
      # - JWT_SECRET=${JWT_SECRET}
    volumes:
      # Mount Docker socket to allow container to use Docker
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount data directory for persistence
      - ./data:/app/data
      # Mount output directory for user files
      - ./output:/app/output
      # Mount node_modules for better performance (optional)
      - node_modules:/app/node_modules
    networks:
      - operonone-network
    depends_on:
      - cleanup
    # Add security options
    security_opt:
      - no-new-privileges:true
    # Add docker group GID to allow Docker access
    group_add:
      - ${DOCKER_GID:-999}
    # Limit resources to prevent abuse
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: "1.0"
        reservations:
          memory: 512M
          cpus: "0.25"

  # Service to periodically clean up orphaned Docker containers
  cleanup:
    image: docker:24-cli
    container_name: operonone-cleanup
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "
        while true; do
          echo 'Cleaning up old OperonOne containers...'
          docker container prune -f --filter 'label=com.operonone.cleanup=true' || true
          docker image prune -f --filter 'dangling=true' || true
          sleep 3600
        done
      "
    networks:
      - operonone-network

volumes:
  node_modules:

networks:
  operonone-network:
    driver: bridge
